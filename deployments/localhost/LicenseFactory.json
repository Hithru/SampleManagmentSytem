{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyLicense",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "licenseOwnerAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToNumberOfLicense",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getLicense",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getLicenseOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_basicLicenseArray",
      "outputs": [
        {
          "internalType": "contract BasicLicense",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x239a3a30dceac5fbf30601a53a5b8aca64b0195ee0e8f8f54e350cdeea4df0a3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1098105",
    "logsBloom": "0x
    "blockHash": "0xc545ba80a82b1212467ef059cb1c686e5cb70a9559357f7a0521228309b1e28c",
    "transactionHash": "0x239a3a30dceac5fbf30601a53a5b8aca64b0195ee0e8f8f54e350cdeea4df0a3",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1098105",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "2ca826ad610d4313572ca8ff17450800",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLicense\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"licenseOwnerAddress\",\"type\":\"address\"}],\"name\":\"getAddressToNumberOfLicense\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLicense\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLicenseOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_basicLicenseArray\",\"outputs\":[{\"internalType\":\"contract BasicLicense\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LicenseFactory.sol\":\"LicenseFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/BasicLicense.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17; \\n\\ncontract BasicLicense{\\n\\n\\n    address private immutable i_owner;\\n    uint256 private immutable i_licenseId;\\n\\n    constructor(address owner,uint256 licenseId) {\\n        i_owner = owner;\\n        i_licenseId = licenseId;\\n    }\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x00d15f0365f4d7ee6db32ce9d9b7a355283f6351b507fa8720734d1a02288e4f\",\"license\":\"MIT\"},\"contracts/LicenseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./BasicLicense.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract LicenseFactory{\\n    \\n    using PriceConverter for uint256;\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _licenseIds;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    address private immutable i_owner;\\n    address[] private s_licenseOwners;\\n    mapping(address => uint256) private s_addressToNumberOfLicense;\\n    AggregatorV3Interface private s_priceFeed;\\n    BasicLicense[] public s_basicLicenseArray;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    function buyLicense() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"License price is Higher!\\\"\\n        );\\n        _licenseIds.increment();\\n        uint256 newLicenseID = _licenseIds.current();\\n        BasicLicense basicLicense = new BasicLicense(msg.sender, newLicenseID);\\n        s_basicLicenseArray.push(basicLicense);\\n        s_addressToNumberOfLicense[msg.sender] += 1;\\n        s_licenseOwners.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getAddressToNumberOfLicense(address licenseOwnerAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToNumberOfLicense[licenseOwnerAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getLicense(uint256 index) public view returns (address) {\\n        return s_basicLicenseArray[index].getOwner();\\n    }\\n    function getLicenseOwners(uint256 index) public view returns (address) {\\n        return s_licenseOwners[index];\\n    }\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x716506fb2f8f78b7198e2166b80e9ab914b0f708b65da5126ee6a99668ecfa87\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\",\"keccak256\":\"0x091f39b96d338217fa2d502e819534a8ee69f2929e2bb566366f2ab8b9a9b7fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106200009e5760003560e01c8063893d20e81162000061578063893d20e814620001a55780639e87a5cd14620001d5578063b2dd12121462000205578063ba7393d01462000249578063f99554471462000255576200009e565b80630257c0e314620000a35780630d8e6e2c14620000e7578063388e3c7614620001175780633ccfd60b146200015b5780636b69a5921462000175575b600080fd5b348015620000b057600080fd5b50620000cf6004803603810190620000c99190620009be565b62000299565b604051620000de919062000a0b565b60405180910390f35b348015620000f457600080fd5b50620000ff620002e2565b6040516200010e919062000a0b565b60405180910390f35b3480156200012457600080fd5b506200014360048036038101906200013d919062000a59565b6200037d565b60405162000152919062000af6565b60405180910390f35b3480156200016857600080fd5b5062000173620003bd565b005b3480156200018257600080fd5b506200018d620004e1565b6040516200019c919062000a0b565b60405180910390f35b348015620001b257600080fd5b50620001bd620004ee565b604051620001cc919062000b24565b60405180910390f35b348015620001e257600080fd5b50620001ed62000516565b604051620001fc919062000b66565b60405180910390f35b3480156200021257600080fd5b506200023160048036038101906200022b919062000a59565b62000540565b60405162000240919062000b24565b60405180910390f35b62000253620005fc565b005b3480156200026257600080fd5b506200028160048036038101906200027b919062000a59565b620007ff565b60405162000290919062000b24565b60405180910390f35b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000352573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000378919062000b9a565b905090565b600481815481106200038e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000443576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516200048b9062000c01565b60006040518083038185875af1925050503d8060008114620004ca576040519150601f19603f3d011682016040523d82523d6000602084013e620004cf565b606091505b5050905080620004de57600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006004828154811062000559576200055862000c18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663893d20e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015620005cf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005f5919062000c5e565b9050919050565b6802b5e3af16b18800006200063d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346200084a90919063ffffffff16565b101562000681576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006789062000cf1565b60405180910390fd5b6200068d60006200088c565b60006200069b6000620008a2565b905060003382604051620006af9062000946565b620006bc92919062000d13565b604051809103906000f080158015620006d9573d6000803e3d6000fd5b5090506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462000791919062000d6f565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60006001828154811062000818576200081762000c18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806200085883620008b0565b90506000670de0b6b3a7640000858362000873919062000daa565b6200087f919062000e24565b9050809250505092915050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015620008ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000925919062000ede565b5050509150506402540be400816200093e919062000f66565b915050919050565b6102688062000feb83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620009868262000959565b9050919050565b620009988162000979565b8114620009a457600080fd5b50565b600081359050620009b8816200098d565b92915050565b600060208284031215620009d757620009d662000954565b5b6000620009e784828501620009a7565b91505092915050565b6000819050919050565b62000a0581620009f0565b82525050565b600060208201905062000a226000830184620009fa565b92915050565b62000a3381620009f0565b811462000a3f57600080fd5b50565b60008135905062000a538162000a28565b92915050565b60006020828403121562000a725762000a7162000954565b5b600062000a828482850162000a42565b91505092915050565b6000819050919050565b600062000ab662000ab062000aaa8462000959565b62000a8b565b62000959565b9050919050565b600062000aca8262000a95565b9050919050565b600062000ade8262000abd565b9050919050565b62000af08162000ad1565b82525050565b600060208201905062000b0d600083018462000ae5565b92915050565b62000b1e8162000979565b82525050565b600060208201905062000b3b600083018462000b13565b92915050565b600062000b4e8262000abd565b9050919050565b62000b608162000b41565b82525050565b600060208201905062000b7d600083018462000b55565b92915050565b60008151905062000b948162000a28565b92915050565b60006020828403121562000bb35762000bb262000954565b5b600062000bc38482850162000b83565b91505092915050565b600081905092915050565b50565b600062000be960008362000bcc565b915062000bf68262000bd7565b600082019050919050565b600062000c0e8262000bda565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905062000c58816200098d565b92915050565b60006020828403121562000c775762000c7662000954565b5b600062000c878482850162000c47565b91505092915050565b600082825260208201905092915050565b7f4c6963656e736520707269636520697320486967686572210000000000000000600082015250565b600062000cd960188362000c90565b915062000ce68262000ca1565b602082019050919050565b6000602082019050818103600083015262000d0c8162000cca565b9050919050565b600060408201905062000d2a600083018562000b13565b62000d396020830184620009fa565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000d7c82620009f0565b915062000d8983620009f0565b925082820190508082111562000da45762000da362000d40565b5b92915050565b600062000db782620009f0565b915062000dc483620009f0565b925082820262000dd481620009f0565b9150828204841483151762000dee5762000ded62000d40565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000e3182620009f0565b915062000e3e83620009f0565b92508262000e515762000e5062000df5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b62000e7d8162000e5c565b811462000e8957600080fd5b50565b60008151905062000e9d8162000e72565b92915050565b6000819050919050565b62000eb88162000ea3565b811462000ec457600080fd5b50565b60008151905062000ed88162000ead565b92915050565b600080600080600060a0868803121562000efd5762000efc62000954565b5b600062000f0d8882890162000e8c565b955050602062000f208882890162000ec7565b945050604062000f338882890162000b83565b935050606062000f468882890162000b83565b925050608062000f598882890162000e8c565b9150509295509295909350565b600062000f738262000ea3565b915062000f808362000ea3565b925082820262000f908162000ea3565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161562000fcb5762000fca62000d40565b5b828205841483151762000fe35762000fe262000d40565b5b509291505056fe60c060405234801561001057600080fd5b506040516102683803806102688339818101604052810190610032919061010e565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508060a08181525050505061014e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a58261007a565b9050919050565b6100b58161009a565b81146100c057600080fd5b50565b6000815190506100d2816100ac565b92915050565b6000819050919050565b6100eb816100d8565b81146100f657600080fd5b50565b600081519050610108816100e2565b92915050565b6000806040838503121561012557610124610075565b5b6000610133858286016100c3565b9250506020610144858286016100f9565b9150509250929050565b60805160a05160fb61016d600039600050506000604b015260fb6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063893d20e814602d575b600080fd5b60336047565b604051603e919060ac565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000609882606f565b9050919050565b60a681608f565b82525050565b600060208201905060bf6000830184609f565b9291505056fea2646970667358221220d160125d29bf172521b0b2843efd3c770bf36cef7611e357ef4b6ca0a3f8ce0564736f6c63430008110033a264697066735822122092bcb0c0703cfbe0c1340d35d4e1c9974ff9af704823f13949d563422a2d12c264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 168,
        "contract": "contracts/LicenseFactory.sol:LicenseFactory",
        "label": "_licenseIds",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)51_storage"
      },
      {
        "astId": 180,
        "contract": "contracts/LicenseFactory.sol:LicenseFactory",
        "label": "s_licenseOwners",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/LicenseFactory.sol:LicenseFactory",
        "label": "s_addressToNumberOfLicense",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 187,
        "contract": "contracts/LicenseFactory.sol:LicenseFactory",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 191,
        "contract": "contracts/LicenseFactory.sol:LicenseFactory",
        "label": "s_basicLicenseArray",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_contract(BasicLicense)150)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(BasicLicense)150)dyn_storage": {
        "base": "t_contract(BasicLicense)150",
        "encoding": "dynamic_array",
        "label": "contract BasicLicense[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(BasicLicense)150": {
        "encoding": "inplace",
        "label": "contract BasicLicense",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)51_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 50,
            "contract": "contracts/LicenseFactory.sol:LicenseFactory",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}